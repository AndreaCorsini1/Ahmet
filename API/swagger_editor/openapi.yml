openapi: 3.0.2

info:
  description: "Suggestion API for creating and querying Ahmet's studies"
  version: "0.1"
  title: "Ahmet API"
  contact:
    email: "andrea.cors95@gmail.com"

servers:
  - url: http://localhost:8080/api/v0.1
    description: Development server API v0.1

tags:
  - name: "Studies"
    description: "Methods for managing the study components and related information"
  - name: "Algorithms"
    description: "Methods for managing the algorithm components"
  - name: "Trials"
    description: "Methods for managing the trial components"
  - name: "Parameters"
    description: "Methods for managing the parameter components and associated information"
  - name: "Metrics"
    description: "Methods for managing the metrics components"
  - name: "Datasets"
    description: "Methods for interacting with the supported datasets"

paths:
  /api/v0.1/users/:
    get:
      operationId: getListUsers
      description: 'View for getting the studies associated to each user. This is a reverse relation on the study table that is able to filter and return the list of studies associated to a specific user.'
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                  previous:
                    type: string
                    nullable: true
                  results:
                    type: array
                    items:
                      properties:
                        id:
                          type: integer
                          readOnly: true
                        username:
                          type: string
                          description: Required. 150 characters or fewer. Letters,
                            digits and @/./+/-/_ only.
                          maxLength: 150
                        studies:
                          type: array
                          items:
                            type: integer
                      required:
                      - username
                      - studies
          description: ''
  /api/v0.1/users/{id}/:
    get:
      operationId: RetrieveUser
      description: Retrieve studies for a specific user
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this user.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                    readOnly: true
                  username:
                    type: string
                    description: Required. 150 characters or fewer. Letters, digits
                      and @/./+/-/_ only.
                    maxLength: 150
                  studies:
                    type: array
                    items:
                      type: integer
                required:
                - username
                - studies
          description: ''
  /api/v0.1/algorithms/:
    get:
      tags:
        - "Algorithms"
      operationId: getListAlgorithms
      description: 'Return the list of available algorithms. Each entry in the list contains all the information associated to the algorithm.'
      parameters:
      - name: page
        required: false
        in: query
        description: 'A page number within the paginated result set.'
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                  previous:
                    type: string
                    nullable: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Algorithm'
          description: 'Successfully found list of all algorithms'
    post:
      tags:
        - "Algorithms"
      operationId: CreateAlgorithm
      description: 'Create a brand new study. This HTTP method should be invoked only after the algorithm code has already been submitted and checked by human supervisor. The method has been inserted for future development on Algorithm submission topic.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema: &id001
              properties:
                name:
                  type: string
                  maxLength: 128
                status:
                  type: string
                  maxLength: 128
              required:
              - name
          application/x-www-form-urlencoded:
            schema: *id001
          multipart/form-data:
            schema: *id001
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Algorithm'
          description: ''
  /api/v0.1/algorithms/{alg_name}/:
    get:
      tags:
        - "Algorithms"
      operationId: RetrieveAlgorithm
      description: 'Get the details of a specific algorithm. The URI must include the algorithm name that should be queried. The response contains the algorithm information (name, status, create and update time).'
      parameters:
      - name: alg_name
        in: path
        required: true
        description: 'The algorithm name to select from the DB.'
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Algorithm'
          description: ''
    delete:
      tags:
        - "Algorithms"
      operationId: DestroyStudy
      description: 'Permanently delete an algorithm by its name . The method does not cancel the algorithm code but it remove the support from the application, hence, it will not be possible to use it in future studies. Note that the studies associated to this algorithm will be deleted too.'
      parameters:
      - name: alg_name
        in: path
        required: true
        description: 'The algorithm name to delete from the DB.'
        schema:
          type: string
      responses:
        '204':
          description: ''
  /api/v0.1/metrics/:
    get:
      tags:
        - "Metrics"
      operationId: listMetrics
      description: 'The list of all available metrics. The metric is an AI model used to evaluate the algorithm behaviour.'
      parameters:
      - name: page
        required: false
        in: query
        description: 'A page number within the paginated result set.'
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                  previous:
                    type: string
                    nullable: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Metric'
          description: ''
    post:
      tags:
        - "Metrics"
      operationId: createMetric
      description: 'Create a new metric. As for the algorithm post method, the metric should be properly checked by a human supervisor before using it. Therefore, this method should be call only after the correctly submission of the metric code for enabling its support. The metric expect the list of compliant datasets other than the metric name. The dataset must already be present in the database at the metric submission.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema: &id003
              properties:
                name:
                  type: string
                  maxLength: 128
                status:
                  type: string
                  maxLength: 128
              required:
              - name
          application/x-www-form-urlencoded:
            schema: *id003
          multipart/form-data:
            schema: *id003
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metric'
          description: ''
  /api/v0.1/metrics/{metric_name}/:
    get:
      tags:
        - "Metrics"
      operationId: retrieveMetric
      description: 'Retrieve the metric details by name. The response is populated by all the store information about the selected metric.'
      parameters:
      - name: metric_name
        in: path
        required: true
        description: 'The metric name to select from the DB.'
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metric'
          description: ''
    put:
      tags:
        - "Metrics"
      operationId: updateMetric
      description: "Update the information about an existing metric."
      parameters:
      - name: metric_name
        in: path
        required: true
        description: 'The name of the metric to update.'
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema: &id005
              properties:
                name:
                  type: string
                  maxLength: 128
                status:
                  type: string
                  maxLength: 128
              required:
              - name
          application/x-www-form-urlencoded:
            schema: *id005
          multipart/form-data:
            schema: *id005
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metric'
          description: ''
    delete:
      tags:
        - "Metrics"
      operationId: destroyMetric
      description: 'Delete the metric support from the application. Again, as for the algorithm the actual code corresponding to the metric will not be cancelled but it will not be possible to use such metric in further study.'
      parameters:
      - name: metric_name
        in: path
        required: true
        description: 'The metric name to delete from the DB.'
        schema:
          type: string
      responses:
        '204':
          description: ''
  /api/v0.1/datasets/:
    get:
      tags:
        - "Datasets"
      operationId: listDatasets
      description: 'Retrieve the list of all supported datasets. The datasets are agnostic from the metric but the opposite is not true. This dependency is modelled in the metric table.'
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                  previous:
                    type: string
                    nullable: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dataset'
          description: ''
    post:
      tags:
        - "Datasets"
      operationId: CreateDataset
      description: 'Enable the support for a new dataset. The setup code of the dataset must be previously committed for verification, then the post can be called. Note the name of the dataset must be unique.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema: &id004
              properties:
                name:
                  type: string
                  maxLength: 128
                  pattern: ^[-a-zA-Z0-9_]+$
                  description: 'Name of the dataset.'
                type:
                  type: string
                  maxLength: 128
                  pattern: ^[-a-zA-Z0-9_]+$
          application/x-www-form-urlencoded:
            schema: *id003
          multipart/form-data:
            schema: *id003
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
          description: ''
  /api/v0.1/datasets/{dataset_name}/:
    get:
      tags:
      - 'Datasets'
      operationId: RetrieveDataset
      description: 'Return the specific information about a dataset. The selection of the dataset is based on the input name in the URI requested.'
      parameters:
        - name: dataset_name
          in: path
          required: true
          description: ''
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
          description: ''
    put:
      tags: 
      - 'Datasets'
      operationId: UpdateDataset
      description: 'Update information about the dataset. For the moment the dataset table is minimal but in future other information could be added.'
      parameters:
        - name: dataset_name
          in: path
          required: true
          description: ''
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema: &id006
              properties:
                name:
                  type: string
                  maxLength: 128
                  pattern: ^[-a-zA-Z0-9_]+$
                type:
                  type: string
                  maxLength: 128
                  pattern: ^[-a-zA-Z0-9_]+$
                status:
                  type: string
                  maxLength: 128
              required:
                - name
                - type
          application/x-www-form-urlencoded:
            schema: *id005
          multipart/form-data:
            schema: *id005
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
          description: ''
    delete:
      tags: 
      - 'Datasets'
      operationId: DestroyDataset
      description: 'Remove the support of the dataset but not its setup code.'
      parameters:
        - name: dataset_name
          in: path
          required: true
          description: ''
          schema:
            type: string
      responses:
        '204':
          description: ''
  /api/v0.1/parameters/:
    get:
      tags:
        - "Parameters"
      operationId: listParameters
      description: 'Retrieve the list of all parameters. In the response will be included all the parameters without further filtering operations.'
      parameters:
      - name: page
        required: false
        in: query
        description: 'A page number within the paginated result set.'
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                  previous:
                    type: string
                    nullable: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Parameter'
          description: ''
    post:
      tags:
        - "Parameters"
      operationId: CreateParameter
      description: 'Create a new parameter associated to a study. The request must include the parameter name, type (FLOAT, INTEGER, DISCRETE and CATEGORICAL), the name of the associated study and either the values field or min-max fields. The FLOAT and INTEGER parameters expect the min-max fields pointing out the sampling range, while the remainings expect a list of values under the values filed. Note that the study name must be valid, i.e. an already created study must be present with such name.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema: &id007
              properties:
                name:
                  type: string
                  maxLength: 128
                  pattern: ^[-a-zA-Z0-9_]+$
                type:
                  enum:
                  - DISCRETE
                  - CATEGORICAL
                  - FLOAT
                  - INTEGER
                values:
                  type: string
                  nullable: true
                min:
                  type: number
                  nullable: true
                max:
                  type: number
                  nullable: true
                study:
                  type: string
              required:
              - name
              - type
              - study
          application/x-www-form-urlencoded:
            schema: *id007
          multipart/form-data:
            schema: *id007
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parameter'
          description: ''
  /api/v0.1/parameters/{id}/:
    get:
      tags:
        - "Parameters"
      operationId: RetrieveParameter
      description: 'Return the details of a specific parameter by id. The name of the parameter is not a unique field, two AI models might use the the same name for different parameters indeed. For getting the parameter id you can request the list of parameters by the study name or by getting the whole parameters list. The specific information associated to a parameter are: name, type, study, values, min and max. All this information are included in the GET response.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this parameter.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parameter'
          description: ''
    delete:
      tags:
        - "Parameters"
      operationId: DestroyParameter
      description: 'Delete a parameter from the database. Note that this operation may leave the study in an inconsistent state, it will miss a parameter. Instead, upon the deletion of a study also the related parameters will be deleted.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this parameter.
        schema:
          type: string
      responses:
        '204':
          description: ''
  /api/v0.1/trials/:
    get:
      tags:
        - "Trials"
      operationId: listTrials
      description: 'Retrieve the list of all trials without filtering operations. The list of trials can be huge depending on the past activities, thus, this method can be harmful.'
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                  previous:
                    type: string
                    nullable: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Trial'
          description: ''
  /api/v0.1/trials/{id}/:
    get:
      tags:
        - "Trials"
      operationId: RetrieveTrialId
      description: 'Retrieve the information associated to an existing trial ID. The response contains all the information associated to a trail, study name, sampled parameter values, score (if yet), further score information, ...'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this trial.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trial'
          description: ''
    delete:
      tags:
        - "Trials"
      operationId: DestroyTrial
      description: 'Delete a trial by ID. This method is safe, the trial has no dependencies with other components for the time being.'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this trial.
        schema:
          type: string
      responses:
        '204':
          description: ''
  /api/v0.1/studies/:
    get:
      tags:
        - "Studies"
      operationId: getListStudys
      description: 'Get the list of all available studies in the database. The response is a list of studies, each containing the current information of the study.'
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                  previous:
                    type: string
                    nullable: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Study'
          description: ''
    post:
      tags:
        - "Studies"
      operationId: CreateStudy
      description: 'Create and save a new study in the database. A study must have a unique name that can be used in future for retrieve information. Furthermore, a study needs an input algorithm and a metric against which the algorithm will be evaluated. Both the algorithm and metric must be present in the databased and if the post request does not specify such information, default value will be assigned. Additionally, the request can set other (optional) parameters of the'
      parameters: []
      requestBody:
        content:
          application/json:
            schema: &id009
              properties:
                name:
                  type: string
                  maxLength: 128
                objective:
                  enum:
                  - MAXIMIZE
                  - MINIMIZE
                status:
                  type: string
                  maxLength: 128
                algorithm:
                  type: string
                metric:
                  type: string
              required:
              - name
              - objective
          application/x-www-form-urlencoded:
            schema: *id009
          multipart/form-data:
            schema: *id009
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Study'
          description: ''
  /api/v0.1/studies/{study_name}/:
    get:
      tags:
        - "Studies"
      operationId: RetrieveStudy1
      description: 'Get information about a specific study. The request must contain (in the URI) the unique name of the study you want to query. The response is composed by the current data about a study.'
      parameters:
      - name: study_name
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Algorithm'
          description: ''
    put:
      tags:
        - "Studies"
      operationId: UpdateStudy
      description: 'Update the study. Here, I abuse of the HTTP PUT method for both partially and completely update filed of a study. This is motivated by the unknown willing of the user a-priori.'
      parameters:
      - name: study_name
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema: &id011
              properties:
                name:
                  type: string
                  maxLength: 128
                  pattern: ^[-a-zA-Z0-9_]+$
                runs:
                  type: integer
                num_suggestions:
                  type: integer
                status:
                  type: string
                  maxLength: 128
                algorithm:
                  type: string
                metric:
                  type: string
                dataset:
                  type: string
              required:
              - name
          application/x-www-form-urlencoded:
            schema: *id011
          multipart/form-data:
            schema: *id011
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Study'
          description: ''
    delete:
      tags:
        - "Studies"
      operationId: destroyStudy
      description: 'Delete a study by name. The method deletes a study (whether is running or completed) by filtering on the name field.'
      parameters:
      - name: study_name
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: ''
  /api/v0.1/studies/{study_name}/parameters/:
    get:
      tags:
        - "Studies"
      operationId: liststudy_parameters
      description: ''
      parameters:
      - name: study_name
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
  /api/v0.1/studies/{study_name}/trials/:
    get:
      tags:
        - "Studies"
      operationId: liststudy_trials
      description: ''
      parameters:
      - name: study_name
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
  /api/v0.1/studies/{study_name}/start/:
    get:
      tags:
        - "Studies"
      operationId: listStartStudys
      description: ''
      parameters:
      - name: study_name
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
  /api/v0.1/token-auth/:
    post:
      operationId: CreateObtainAuthToken
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''

components:
  schemas:
    Algorithm:
      type: object
      description: 'Object shaping the optimization algorithm. I could allow in future to upload a new file containing an algorithm. Such upload should add an entry to this table for extending the support to entire framework.'
      properties:
        id:
          type: integer
          readOnly: true
          description: 'Unique identifier of the algorithm.'
        name:
          type: string
          maxLength: 128
          pattern: ^[-a-zA-Z0-9_]+$
          description: 'Name of the algorithm.'
        status:
          type: string
          maxLength: 128
          description: 'Status of the algorithm: AVAILABLE, UNAVAILABLE, ...'
        created_time:
          type: string
          format: date-time
          readOnly: true
        updated_time:
          type: string
          format: date-time
          readOnly: true
    Metric:
      type: object
      description: 'Object used to keep the supported metrics. As for the algorithm class, I could allow in future to upload a new file containing an algorithm. Such upload should add an entry to this table for extending the support to entire framework.'
      properties:
        id:
          type: integer
          readOnly: true
          description: 'Unique identifier of the metric.'
        name:
          type: string
          maxLength: 128
          pattern: ^[-a-zA-Z0-9_]+$
          description: 'Name of the metric.'
        datasets:
          $ref: '#/components/schemas/Dataset'
          type: array
          items:
            type: integer
          description: 'List of supported dataset.'
        status:
          type: string
          maxLength: 128
          description: 'Status of the metric: AVAILABLE, UNAVAILABLE, ...'
        created_time:
          type: string
          format: date-time
          readOnly: true
        updated_time:
          type: string
          format: date-time
          readOnly: true
    Dataset:
      type: object
      description: 'Dataset supported by the framework. Each dataset should be used for a regression (r) or classification (c) problem. Such distinction impacts also the metric.'
      properties:
        id:
          type: integer
          readOnly: true
          description: 'Unique identifier of the dataset.'
        name:
          type: string
          maxLength: 128
          pattern: ^[-a-zA-Z0-9_]+$
          description: 'Name of the dataset.'
        type:
          type: string
          maxLength: 128
          pattern: ^[-a-zA-Z0-9_]+$
        status:
          type: string
          maxLength: 128
    Study:
      type: object
      description: 'The study is the core of the application. A study defines which algorithm should be tested on which metric and how it should be done.'
      properties:
        id:
          type: integer
          readOnly: true
        owner:
          type: string
          readOnly: true
        name:
          type: string
          maxLength: 128
          pattern: ^[-a-zA-Z0-9_]+
          description: 'Name of the study.'
        runs:
          type: integer
          description: 'Number of call to the algorithm.'
        num_suggestions:
          type: integer
          description: 'Number of suggestions (trials) generated by each algorithm call.'
        status:
          type: string
          maxLength: 128
          description: 'Status of the metric: PENDING, STARTED, ...'
        dataset:
          $ref: '#/components/schemas/Dataset'
        algorithm:
          $ref: '#/components/schemas/Algorithm'
        metric:
          $ref: '#/components/schemas/Metric'
        created_time:
          type: string
          format: date-time
          readOnly: true
        updated_time:
          type: string
          format: date-time
          readOnly: true
    Parameter:
      type: object
      description: 'Define the hyper-parameters building the search space of a study. The algorithms will pick values from these parameters to make suggestions/trials.'
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 128
          pattern: ^[-a-zA-Z0-9_]+$
          description: 'Name of the parameter.'
        type:
          description: 'Parameter type..'
          enum:
          - DISCRETE
          - CATEGORICAL
          - FLOAT
          - INTEGER
        values:
          type: string
          nullable: true
          description: 'List of feasible values.'
        min:
          type: number
          nullable: true
          description: 'Minimum value of the range.'
        max:
          type: number
          nullable: true
          description: 'Maximum value of the range.'
        study:
          $ref: '#/components/schemas/Study'
      required:
      - name
      - type
      - study
    Trial:
      type: object
      description: ''
      properties:
        id:
          type: integer
          readOnly: true
        parameters:
          type: string
          nullable: true
          description: 'Sampled values of the study parameters.'
        training_step:
          type: integer
          nullable: true
          description: 'Training step.'
        score:
          type: number
          nullable: true
          description: 'Result of the trial.'
        score_info:
          type: string
          nullable: true
          description: 'Other information about the trial result.'
        status:
          enum:
          - PENDING
          - STARTED
          - COMPLETED
          - STOPPED
        created_time:
          type: string
          format: date-time
          readOnly: true
        updated_time:
          type: string
          format: date-time
          readOnly: true
        study:
          $ref: '#/components/schemas/Study'
      required:
      - study
      - status
